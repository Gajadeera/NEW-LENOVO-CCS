import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Modal from '../../components/common/Modal';
import Input from '../../components/common/Input';
import Select from '../../components/common/Select';
import Button from '../../components/common/Button';
import Alert from '../../components/common/Alert';
import { CustomerSelect, DeviceSelect, UserSelect } from '../../components/common/SelectComponents';


const CreateJobModal = ({ isOpen, onClose, currentUser }) => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        description: '',
        priority: 'Medium',
        status: 'Pending Assignment',
        customer_id: null,
        device_id: null,
        assigned_to: null,
        scheduled_date: ''
    });
    const [customers, setCustomers] = useState([]);
    const [devices, setDevices] = useState([]);
    const [users, setUsers] = useState([]);
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const [isLoadingData, setIsLoadingData] = useState(true);

    // Calculate SLA deadline (3 years from now)
    const getSLADeadline = () => {
        const date = new Date();
        date.setFullYear(date.getFullYear() + 3);
        return date;
    };

    useEffect(() => {
        const fetchData = async () => {
            try {
                const storedUser = localStorage.getItem('user');
                const token = storedUser ? JSON.parse(storedUser).token : null;

                const [customersRes, devicesRes, usersRes] = await Promise.all([
                    axios.get(`${import.meta.env.VITE_REACT_APP_BACKEND_BASED_URL}/customers`, {
                        headers: { Authorization: `Bearer ${token}` }
                    }),
                    axios.get(`${import.meta.env.VITE_REACT_APP_BACKEND_BASED_URL}/devices`, {
                        headers: { Authorization: `Bearer ${token}` }
                    }),
                    axios.get(`${import.meta.env.VITE_REACT_APP_BACKEND_BASED_URL}/users`, {
                        headers: { Authorization: `Bearer ${token}` }
                    })
                ]);

                setCustomers(customersRes.data.customers || []);
                setDevices(devicesRes.data.devices || []);
                setUsers(usersRes.data.filter(user => user.role === 'technician') || []);
                setIsLoadingData(false);
            } catch (err) {
                setError('Failed to load required data');
                console.error('Data loading error:', err);
                setIsLoadingData(false);
            }
        };

        if (isOpen) {
            fetchData();
        }
    }, [isOpen]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleCustomerChange = (selectedCustomer) => {
        setFormData(prev => ({
            ...prev,
            customer_id: selectedCustomer ? selectedCustomer._id : null
        }));
    };

    const handleDeviceChange = (selectedDevice) => {
        setFormData(prev => ({
            ...prev,
            device_id: selectedDevice ? selectedDevice._id : null
        }));
    };

    const handleTechnicianChange = (selectedUser) => {
        setFormData(prev => ({
            ...prev,
            assigned_to: selectedUser ? selectedUser._id : null
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        // Validation
        if (!formData.customer_id || !formData.device_id || !formData.description) {
            setError('Please fill in all required fields');
            return;
        }

        try {
            setLoading(true);
            const jobData = {
                ...formData,
                created_by: currentUser || null,
                scheduled_date: formData.scheduled_date ? new Date(formData.scheduled_date) : null,
                sla_deadline: getSLADeadline(), // Auto-set to 3 years from now
                assigned_to: formData.assigned_to || null
                // job_number will be auto-generated by the pre-save hook
            };
            console

            const storedUser = localStorage.getItem('user');
            const token = storedUser ? JSON.parse(storedUser).token : null;
            if (!token) {
                setError('You are not authorized to perform this action. Please log in.');
                setLoading(false);
                return;
            }

            const response = await axios.post(
                `${import.meta.env.VITE_REACT_APP_BACKEND_BASED_URL}/jobs`,
                jobData,
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                        'Content-Type': 'application/json',
                    }
                }
            );

            // Clear form and close modal
            setFormData({
                description: '',
                priority: 'Medium',
                status: 'Pending Assignment',
                customer_id: null,
                device_id: null,
                assigned_to: null,
                scheduled_date: ''
            });
            onClose();
            navigate(`/jobs/${response.data._id}`);

        } catch (err) {
            setError(err.response?.data?.message || 'Failed to create job');
            console.error('Job creation error:', err);
        } finally {
            setLoading(false);
        }
    };

    const priorityOptions = [
        { value: 'Low', label: 'Low' },
        { value: 'Medium', label: 'Medium' },
        { value: 'High', label: 'High' },
        { value: 'Urgent', label: 'Urgent' }
    ];

    const statusOptions = [
        { value: 'Pending Assignment', label: 'Pending Assignment' },
        { value: 'Assigned', label: 'Assigned' },
        { value: 'In Progress', label: 'In Progress' },
        { value: 'On Hold', label: 'On Hold' },
        { value: 'Device Collected', label: 'Device Collected' },
        { value: 'Awaiting Workshop Repair', label: 'Awaiting Workshop Repair' },
        { value: 'Ready to Close', label: 'Ready to Close' },
        { value: 'Pending Closure', label: 'Pending Closure' },
        { value: 'Closed', label: 'Closed' },
        { value: 'Reopened', label: 'Reopened' }
    ];

    if (isLoadingData) {
        return (
            <Modal isOpen={isOpen} onClose={onClose} title="Create New Job" size="md">
                <div className="flex justify-center items-center h-32">
                    <p>Loading data...</p>
                </div>
            </Modal>
        );
    }

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Create New Job" size="lg">
            {error && (
                <Alert type="error" message={error} className="mb-4" />
            )}

            <form onSubmit={handleSubmit}>
                <div className="grid grid-cols-1 gap-4 mb-4">

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <CustomerSelect
                            label="Customer*"
                            customers={customers}
                            selectedCustomer={formData.customer_id ?
                                customers.find(c => c._id === formData.customer_id) : null}
                            onChange={handleCustomerChange}
                            required
                        />
                        <DeviceSelect
                            label="Device*"
                            devices={devices}
                            selectedDevice={formData.device_id ?
                                devices.find(d => d._id === formData.device_id) : null}
                            onChange={handleDeviceChange}
                            required
                        />
                    </div>

                    <Input
                        label="Description*"
                        name="description"
                        type="textarea"
                        value={formData.description}
                        onChange={handleChange}
                        required
                        rows={4}
                    />

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <Select
                            label="Priority"
                            name="priority"
                            value={formData.priority}
                            onChange={handleChange}
                            options={priorityOptions}
                        />
                        <Select
                            label="Status"
                            name="status"
                            value={formData.status}
                            onChange={handleChange}
                            options={statusOptions}
                        />
                        <UserSelect
                            label="Assign To"
                            users={users}
                            selectedUser={formData.assigned_to ?
                                users.find(u => u._id === formData.assigned_to) : null}
                            onChange={handleTechnicianChange}
                        />
                    </div>

                    <div className="grid grid-cols-1 gap-4">
                        <Input
                            label="Scheduled Date"
                            name="scheduled_date"
                            type="datetime-local"
                            value={formData.scheduled_date}
                            onChange={handleChange}
                        />
                    </div>
                </div>

                <div className="flex justify-end gap-2 mt-6">
                    <Button
                        type="button"
                        onClick={onClose}
                        variant="outline"
                    >
                        Cancel
                    </Button>
                    <Button
                        type="submit"
                        variant="primary"
                        loading={loading}
                    >
                        {loading ? 'Creating...' : 'Create Job'}
                    </Button>
                </div>
            </form>
        </Modal>
    );
};

export default CreateJobModal;